name: Build SORT

on: [push, pull_request]

jobs:
  Windows:
    runs-on: windows-latest
    steps:
    - name: Checking Out Source Code
      uses: actions/checkout@v1
    - name: Setup MSBuild.exe
      uses: warrenbuckley/Setup-MSBuild@v1
    - name: Get Cache Directory
      id: cache-dir
      run: |
          echo ::set-output name=dir::%CD%
      shell: cmd
    - name: Load Dependencies from Cache
      uses: actions/cache@v1
      id: cache-dep
      with:
        path: ${{ steps.cache-dir.outputs.dir }}/dependencies
        key: Windows-dep-ver-0
    - name: Install Dependencies
      if: steps.cache-dep.outputs.cache-hit != 'true'
      run: make update_dep
      shell: cmd
    - name: Build Release Version
      run: make release
      shell: cmd
    - name: Build Debug Version
      run: make debug
      shell: cmd
    - name: Unit Test
      run: |
           cd bin
           sort_r.exe --unittest
      shell: cmd
  Macos:
    runs-on: macOS-latest
    steps:
    - name: Checking Out Source Code
      uses: actions/checkout@v1
    - name: Get Cache Directory
      id: cache-dir
      run: |
          echo "::set-output name=dir::$(pwd)"
    - name: Load Dependencies from Cache
      uses: actions/cache@v1
      id: cache-dep
      with:
        path: ${{ steps.cache-dir.outputs.dir }}/dependencies
        key: MacOS-dep-ver-0
    - name: Install Dependencies
      if: steps.cache-dep.outputs.cache-hit != 'true'
      run: make update_dep
    - name: Build Release Version
      run: make release
    - name: Build Debug Version
      run: make debug
    - name: Unit Test
      run: cd bin;./sort_r --unittest
  Ubuntu_18_04:
    runs-on: ubuntu-18.04
    steps:
    - name: Checking Out Source Code
      uses: actions/checkout@v1
    - name: Configure Environment
      run: |
           sudo apt-get install libopenexr-dev
           sudo apt-get install libboost-all-dev
           wget -O - https://apt.llvm.org/llvm-snapshot.gpg.key | sudo apt-key add -
           sudo apt-add-repository "deb http://apt.llvm.org/xenial/ llvm-toolchain-xenial-6.0 main"
           sudo apt-get update
           sudo apt-get install -y clang-6.0
    - name: Get Cache Directory
      id: cache-dir
      run: |
           echo "::set-output name=dir::$(pwd)"
    - name: Load Dependencies from Cache
      uses: actions/cache@v1
      id: cache-dep
      with:
        path: ${{ steps.cache-dir.outputs.dir }}/dependencies
        key: Ubuntu-18-04-dep-ver-0
    - name: Install Dependencies
      if: steps.cache-dep.outputs.cache-hit != 'true'
      run: make update_dep
    - name: Build Release Version
      run: make release
    - name: Build Debug Version
      run: make debug
    - name: Unit Test
      run: cd bin;./sort_r --unittest
  Ubuntu_16_04:
    runs-on: ubuntu-16.04
    steps:
    - name: Checking Out Source Code
      uses: actions/checkout@v1
    - name: Configure Environment
      run: |
           sudo apt-get install libopenexr-dev
           sudo apt-get install libboost-all-dev
           wget -O - https://apt.llvm.org/llvm-snapshot.gpg.key | sudo apt-key add -
           sudo apt-add-repository "deb http://apt.llvm.org/xenial/ llvm-toolchain-xenial-6.0 main"
           sudo apt-get update
           sudo apt-get install -y clang-6.0
           sudo apt-get install -y software-properties-common
           sudo add-apt-repository ppa:ubuntu-toolchain-r/test
           sudo apt update
           sudo apt install g++-7 -y
           sudo update-alternatives --install /usr/bin/gcc gcc /usr/bin/gcc-7 60 --slave /usr/bin/g++ g++ /usr/bin/g++-7
           sudo update-alternatives --config gcc
    - name: Get Cache Directory
      id: cache-dir
      run: |
           echo "::set-output name=dir::$(pwd)"
    - name: Load Dependencies from Cache
      uses: actions/cache@v1
      id: cache-dep
      with:
        path: ${{ steps.cache-dir.outputs.dir }}/dependencies
        key: Ubuntu-16-04-dep-ver-0
    - name: Install Dependencies
      if: steps.cache-dep.outputs.cache-hit != 'true'
      run: make update_dep
    - name: Build Release Version
      run: make release
    - name: Build Debug Version
      run: make debug
    - name: Unit Test
      run: cd bin;./sort_r --unittest
